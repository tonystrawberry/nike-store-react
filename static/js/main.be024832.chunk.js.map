{"version":3,"sources":["redux/actions.tsx","assets/nike_logo.svg","assets/loading.gif","components/Header.tsx","components/ProductOverview.tsx","components/Loading.tsx","containers/ProductOverviewContainer.tsx","containers/App.tsx","serviceWorker.js","redux/reducers.tsx","index.js","redux/constants.tsx"],"names":["selectProduct","productId","type","SELECT_PRODUCT","payload","unselectProduct","UNSELECT_PRODUCT","fetchProducts","FETCH_PRODUCTS","fetchProductsSuccess","products","FETCH_PRODUCTS_SUCCESS","fetchProductsError","FETCH_PRODUCTS_ERROR","module","exports","Header","href","className","src","logo","alt","ProductOverview","onClick","props","onSelected","product","_id","this","imageUrl","title","subtitle1","subtitle2","PureComponent","connect","dispatch","Loading","width","LoadingGif","ProductCardLazy","React","lazy","ProductOverviewContainer","fetchShopProducts","fetch","then","res","ok","Error","statusText","text","body","JSON","parse","loading","selected","fallback","new","Fragment","map","state","App","exact","path","render","to","Boolean","window","location","hostname","match","initialStateOverview","selectedProductId","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be024832.chunk.js","sourcesContent":["import {\n  SELECT_PRODUCT,\n  UNSELECT_PRODUCT,\n  FETCH_PRODUCTS,\n  FETCH_PRODUCTS_SUCCESS,\n  FETCH_PRODUCTS_ERROR\n} from './constants'\n\nimport { Product } from '../types'\n\nexport const selectProduct = (productId : string) => ({ type: SELECT_PRODUCT, payload: productId })\nexport const unselectProduct = () => ({ type: UNSELECT_PRODUCT, payload: null })\nexport const fetchProducts = () => ({ type: FETCH_PRODUCTS, payload: null })\nexport const fetchProductsSuccess = (products: Product[]) => ({ type: FETCH_PRODUCTS_SUCCESS, payload: products })\nexport const fetchProductsError = () => ({ type: FETCH_PRODUCTS_ERROR, payload: null })\n","module.exports = __webpack_public_path__ + \"static/media/nike_logo.4c58725d.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.ae765ba3.gif\";","import React from 'react';\nimport logo from '../assets/nike_logo.svg';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header>\n      <a href=\"/\"><img className=\"logo\" src={logo} alt=\"Nike\" /></a>\n    </header>\n  );\n};\n\nexport default Header;","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { selectProduct } from '../redux/actions';\nimport { Dispatch } from 'redux';\n\nimport NikeAirForceMedium from '../assets/nike_airforce-medium.jpg';\n\nimport './ProductOverview.css';\nimport { Product } from '../types';\n\nconst mapStateToProps = () => {\n  return {\n\n  }\n}\n\ninterface IProductOverviewProps {\n  onSelected: {( productId : string): void},\n  product: Product\n}\n\ninterface IProductOverviewState {\n  \n}\n\nconst mapDispatchToProps = (dispatch : Dispatch) => {\n  return {\n    onSelected: (productId : string) => dispatch(selectProduct(productId))\n  }\n}\n\nclass ProductOverview extends PureComponent<IProductOverviewProps, IProductOverviewState> {\n  render() {\n    return (\n      <div className=\"product-overview\" onClick={() => this.props.onSelected(this.props.product._id)}>\n        <div className=\"product-photo__container\">\n          <img className=\"product-photo\" src={this.props.product.imageUrl} alt=\"Nike Air Force\"></img>\n        </div>\n        <div className=\"product-overview__info\">\n          <h1 className=\"product-overview__title\">{this.props.product.title}</h1>\n          <div className=\"product-overview__type\">{this.props.product.subtitle1}</div>\n          <div className=\"product-overview__type\">{this.props.product.subtitle2}</div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductOverview);","import React, { PureComponent } from 'react';\nimport LoadingGif from '../assets/loading.gif';\n\nclass Loading extends PureComponent {\n  \n  render() {\n    return (\n      <div>\n        <img width=\"50\" src={LoadingGif} alt=\"Loading\"/>\n      </div>\n    );\n  }\n};\n\nexport default Loading;","import React, { PureComponent, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport ProductOverview from '../components/ProductOverview';\nimport Loading from '../components/Loading';\n\nimport { State, Product } from '../types';\n\nimport './ProductOverviewContainer.css';\nimport { fetchProducts, fetchProductsSuccess, fetchProductsError } from '../redux/actions';\n\nconst ProductCardLazy = React.lazy(() => import('../components/ProductCard'));\n\nconst mapStateToProps = (state: { selectProduct : State }) => {\n  return {\n    selected: state.selectProduct.selected,\n    loading: state.selectProduct.loading,\n    products: state.selectProduct.products\n  }\n}\n\nconst mapDispatchToProps = (dispatch : Dispatch ) => {\n  return {\n    fetchProducts: () => dispatch(fetchProducts()),\n    fetchProductsSuccess: (products: Product[]) => dispatch(fetchProductsSuccess(products)),\n    fetchProductsError: () => dispatch(fetchProductsError()),\n  }\n}\ninterface IProductOverviewContainerProps {\n  selected: boolean,\n  loading: boolean,\n  products: Product[],\n  fetchProducts: {(): void},\n  fetchProductsSuccess: {(products: Product[]): void},\n  fetchProductsError: {(): void}\n}\n\ninterface IProductOverviewContainerState {\n  \n}\n\nclass ProductOverviewContainer extends PureComponent<IProductOverviewContainerProps, IProductOverviewContainerState> {\n\n  componentDidMount(){\n    this.fetchShopProducts()\n\n  }\n\n  fetchShopProducts(){\n    this.props.fetchProducts()\n    fetch('/api/products')\n      .then(res => {\n        if (!res.ok) throw new Error(res.statusText)\n        return res.text()\n      })\n      .then((body: any) => {\n        this.props.fetchProductsSuccess(JSON.parse(body))\n      });\n  }\n\n  render() {\n\n    if (this.props.loading){\n      return(\n        <div className=\"product-overview__container\">\n          <Loading />\n        </div>\n      )\n    }\n\n    return (\n      <div className={`product-overview__container ${this.props.selected ? 'product-selected' : ''}`}>\n        {!this.props.selected ?\n          <React.Fragment>\n            {this.props.products.map((product: Product) => {\n              return <ProductOverview product={product}/>\n            })}\n          </React.Fragment>\n          :\n          <Suspense fallback={<Loading />}>\n            <ProductCardLazy new={false} />\n          </Suspense>\n        }\n      </div>\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductOverviewContainer);","import React from 'react';\nimport './App.css';\nimport Header from '../components/Header';\nimport ProductOverviewContainer from './ProductOverviewContainer'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Header />\n            <ProductOverviewContainer />\n          </Route>\n          <Route render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  SELECT_PRODUCT,\n  UNSELECT_PRODUCT,\n  FETCH_PRODUCTS,\n  FETCH_PRODUCTS_SUCCESS,\n  FETCH_PRODUCTS_ERROR\n} from './constants';\n\nimport { State, Action } from '../types'\n\nconst initialStateOverview : State = {\n  selected: false,\n  selectedProductId: null,\n  products: [],\n  loading: false\n}\n\nexport const selectProduct = (state: State = initialStateOverview, action: Action = {type: '', payload: null} ) => {\n  switch (action.type) {\n    case SELECT_PRODUCT:\n      return Object.assign({}, state, {selected: true, selectedProductId: action.payload})\n    case UNSELECT_PRODUCT:\n      return Object.assign({}, state, {selected: false, selectedProductId: null})\n    case FETCH_PRODUCTS:\n      return {...state, loading: true}\n    case FETCH_PRODUCTS_SUCCESS:\n      return {...state, products: action.payload, loading: false}\n    case FETCH_PRODUCTS_ERROR:\n      return {...state, loading: false}\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { selectProduct } from './redux/reducers';\n\nimport './index.css';\nimport './normalize.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({selectProduct})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const SELECT_PRODUCT = 'SELECT_PRODUCT';\nexport const UNSELECT_PRODUCT = 'UNSELECT_PRODUCT';\nexport const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\nexport const FETCH_PRODUCTS_SUCCESS = 'FETCH_PRODUCTS_SUCCESS';\nexport const FETCH_PRODUCTS_ERROR = 'FETCH_PRODUCTS_ERROR';"],"sourceRoot":""}